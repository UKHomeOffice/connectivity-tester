eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CgojICB0ZXN0OgojICAgIGltYWdlOiBnb2xhbmc6MS45CiMgICAgY29tbWFuZHM6CiMgICAgICAtIGdvIGdldCBnaXRodWIuY29tL3N0cmV0Y2hyL3Rlc3RpZnkKIyAgICAgIC0gZ28gdGVzdCAtdgoKICBidWlsZDoKICAgIGltYWdlOiBnb2xhbmc6MS45CiAgICBjb21tYW5kczoKIyAgICAgIC0gR09PUz13aW5kb3dzIEdPQVJDSD1hbWQ2NCBnbyBidWlsZCAtYSAtbGRmbGFncyAnLWV4dGxkZmxhZ3MgIi1zdGF0aWMiJyAtbyBjb25uZWN0aXZpdHktdGVzdGVyLXdpbmRvd3MtYW1kNjQuZXhlOwogICAgICAtIEdPT1M9bGludXggICBHT0FSQ0g9YW1kNjQgZ28gYnVpbGQgLWEgLWxkZmxhZ3MgJy1leHRsZGZsYWdzICItc3RhdGljIicgLW8gY29ubmVjdGl2aXR5LXRlc3Rlci1saW51eC1hbWQ2NDsKIyAgICAgIC0gR09PUz1kYXJ3aW4gIEdPQVJDSD1hbWQ2NCBnbyBidWlsZCAtYSAtbGRmbGFncyAnLWV4dGxkZmxhZ3MgIi1zdGF0aWMiJyAtbyBjb25uZWN0aXZpdHktdGVzdGVyLWRhcndpbi1hbWQ2NDsKCiMgIGdpdGh1Yl9yZWxlYXNlOgojICAgIGltYWdlOiBwbHVnaW5zL2dpdGh1Yi1yZWxlYXNlCiMgICAgYXBpX2tleTogJHtHSVRIVUJfVE9LRU59CiMgICAgZmlsZXM6CiMgICAgICAtIGNvbm5lY3Rpdml0eS10ZXN0ZXItd2luZG93cy1hbWQ2NC5leGUKIyAgICAgIC0gY29ubmVjdGl2aXR5LXRlc3Rlci1saW51eC1hbWQ2NAojICAgICAgLSBjb25uZWN0aXZpdHktdGVzdGVyLWRhcndpbi1hbWQ2NAojICAgIGNoZWNrc3VtOgojICAgICAgLSBtZDUKIyAgICAgIC0gc2hhMQojICAgICAgLSBzaGEyNTYKIyAgICAgIC0gc2hhNTEyCiMgICAgICAtIGFkbGVyMzIKIyAgICAgIC0gY3JjMzIKIyAgICB3aGVuOgojICAgICAgZXZlbnQ6IHRhZwoKIyMjIyMgRE9DS0VSCgojICBkb2NrZXItYnVpbGQ6CiMgICAgcHJpdmlsZWdlZDogdHJ1ZQojICAgIGltYWdlOiBkb2NrZXI6MS4xMgojICAgIGVudmlyb25tZW50OgojICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQojICAgIGNvbW1hbmRzOgojICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2Nvbm5lY3Rpdml0eS10ZXN0ZXI6JHtEUk9ORV9DT01NSVRfU0hBfSAuCiMgICAgd2hlbjoKIyAgICAgIGJyYW5jaDogbWFzdGVyCiMgICAgICBldmVudDogcHVzaAojCiMgIGltYWdlX3RvX3F1YXk6CiMgICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiMgICAgZW52aXJvbm1lbnQ6CiMgICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiMgICAgY29tbWFuZHM6CiMgICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtjb25uZWN0aXZpdHlfdGVzdGVyIiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwojICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvY29ubmVjdGl2aXR5LXRlc3Rlcjoke0RST05FX0NPTU1JVF9TSEF9CiMgICAgd2hlbjoKIyAgICAgIGJyYW5jaDogbWFzdGVyCiMgICAgICBldmVudDogcHVzaAoKIyMjIyMgUEFDS0VSIGJ1aWxkcwoKICBsaW51eC1wYWNrZXItdmFsaWRhdGU6CiAgICBpbWFnZTogY2hyaXNucy9wYWNrZXItYW5zaWJsZQogICAgZW52aXJvbm1lbnQ6CiAgICBjb21tYW5kczoKICAgICAgLSBleHBvcnQgSE9NRT0vaG9tZS9wYWNrZXIKICAgICAgLSBwYWNrZXIgdmFsaWRhdGUgcGFja2VyLmpzb24KCiAgbGludXgtcGFja2VyLWluc3BlY3Q6CiAgICBpbWFnZTogY2hyaXNucy9wYWNrZXItYW5zaWJsZQogICAgZW52aXJvbm1lbnQ6CiAgICBjb21tYW5kczoKICAgICAgLSBleHBvcnQgSE9NRT0vaG9tZS9wYWNrZXIKICAgICAgLSBwYWNrZXIgaW5zcGVjdCBwYWNrZXIuanNvbgoKICBsaW51eC1wYWNrZXItYnVpbGQ6CiAgICBpbWFnZTogY2hyaXNucy9wYWNrZXItYW5zaWJsZQogICAgZW52aXJvbm1lbnQ6CiAgICBjb21tYW5kczoKICAgICAgLSBleHBvcnQgSE9NRT0vaG9tZS9wYWNrZXIKICAgICAgLSBwYWNrZXIgYnVpbGQgcGFja2VyLmpzb24KICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCiMgICAgICBicmFuY2g6IG1hc3RlcgoKc2VydmljZXM6CiAgZGluZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMi1kaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBjb21tYW5kOgogICAgICAtICItcyIKICAgICAgLSAib3ZlcmxheSI.HnigFR715pEEqAgqZ70BTU3VdU9Btiw5NV1g4PJs3LE